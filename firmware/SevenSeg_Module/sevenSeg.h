/************************************************************************************
* Seven Segment Display Module
*
* Contains everything necessary to construct seven segment display objects, mirroring
* real seven segment displays. Such objects allow for a hexadecimal digit (0-F) to be
* stored in a member. The hex number can then be converted and stored in required
* 8-bit binary corresponding to the appropriate segments by calling the hexToSevSeg
* function on the object; this binary is automatically inverted if indicated by the
* object's activeLow member. Additionally, a member is available to store a 0 or 1,
* representing whether or not the decimal point on the display is lit up. The binary
* code to turn all segments off can be generated by storing the value of preprocessor
* macro OFF_CODE in the object's hexDigit member, and passing it to the hexTo7Seg
* function.
*
* An additional function is also available to attempt to read a hexadecimal digit
* (or the OFF code) from the display with decimal point state, called sevSegToHex.
* This function may be useful in some situation where you are unsure the hexDigit
* member matches what is displayed, and need a convenient way to read the display
* contents in hex.
*
* Please note: this module does not contain any functionality to write to an actual
* seven segment display; it is anticipated that the binary segment code will be
* accessed externally from this module and written to the display there.
*
* For future Mason -- maybe add greater character functionality for the displays?
*
* Author:       Mason Kury
* Created:      November 9, 2022
* Modified:     December 2, 2022
************************************************************************************/

#ifndef SEVENSEG_MODULE_SEVENSEG_H_
#define SEVENSEG_MODULE_SEVENSEG_H_


//########## SYMBOLIC CONSTANTS ##########//
// a display object's hexDigit member can be set to these codes to achieve the desired effect
// DO NOT CHANGE THESE VALUES; A LOOKUP TABLE IS USED TO DECODE HEX TO SEGMENT CODE, WHICH DEPENDS ON THESE AS INDEXES
#define OFF_CODE            0x10    // represents a blank/OFF display
#define DASH_CODE           0x11    // represents a dash across the middle of the display (segment G)


//########## STRUCTURES ##########//
typedef struct SEVEN_SEG_DISP
{
    unsigned char activeLow;        // boolean with 1=active low / 0=active high indicating necessity of binary code inversion
    unsigned char hexDigit;         // a single base 16 hexadecimal digit (0 to F) to convert OR OFF_CODE TO TURN DISPLAY OFF
    unsigned char dp;               // boolean with 1=on / 0=off indicating the state of the decimal point
    unsigned char currBinSegCode;   // 7 segment code in binary (segs A to G) plus decimal point CURRENTLY BEING DISPLAYED
    unsigned char nextBinSegCode;   // fresh segment code NOT YET WRITTEN TO THE DISPLAY (if different from currBinSegCode)
                                    // binSegCode format <BIT7:BIT0> is {dp, G, F, E, D, C, B, A}
}
SEVEN_SEG_DISP;


//########## FUNCTION PROTOTYPES ##########//

/************************************************************************************
* Function: hexToSevSeg
*
* Description:
*   Converts the hexadecimal value currently stored in a 7seg display's hexDigit
*   member into the appropriate binary; the binary code is placed into the 7seg's
*   nextBinSegCode member in the format <BIT7:BIT0> {dp, G, F, E, D, C, B, A}.
*   The binary code is automatically inverted if the display is indicated as being
*   active-low by its activeLow member.
*
* Arguments:
*   *display    -   pointer to the 7seg display object
*
* Returns:
*   char convFail; 0 if hex to 7seg code was successful, nonzero if the contents of
*   display->hexDigit were not a valid hexadecimal number.
*
* Author:       Mason Kury
* Date:         November 9, 2022
* Modified:     November 14, 2022
************************************************************************************/
unsigned char hexToSevSeg(SEVEN_SEG_DISP *const display);

/************************************************************************************
* Function: sevSegToHex
*
* Description:
*   Attempts to convert the binary code currently displayed on a 7seg display back
*   into a hexadecimal digit (or the OFF_CODE). If successful, the hex digit is
*   stored in the display object's hexDigit member, and the decimal point state is
*   stored in the dp member.
*
* Arguments:
*   *display    -   pointer to the 7seg display object
*
* Returns:
*   char convFail; 0 if 7seg to hex code was successful, nonzero if a valid hex digit
*   or code was not recognized from the display through display->currBinSegCode
*
* Author:       Mason Kury
* Date:         November 9, 2022
* Modified:     November 11, 2022
************************************************************************************/
unsigned char SevSegToHex(SEVEN_SEG_DISP *const display);


#endif /* SEVENSEG_MODULE_SEVENSEG_H_ */
